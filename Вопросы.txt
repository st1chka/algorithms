Тема 1 (Синтаксис + ООП):

1.	Чем по умолчанию инициализируются локальные переменные? - проверка в момент компиляции

2.	Для чего нужны пакеты в Java? -для предотвращения конфликтов с названиями, для контроля доступа, 
	для облегчения поиска/нахождения и использования классов, интерфейсов, перечислений и аннотаций и т.д

3.	Что такое статический импорт? -  можем вызвать метод не указывая класс

4.	Что делает ключевое слово package?
5.	Что такое инкапсуляция, полиморфизм и наследование?
6.	Что такое абстрактный класс? 
7.	Что такое интерфейсы? Функциональные интерфейсы? Какие ФИ вы знаете? Бывают ли пустые интерфейсы? 

8.	При импорте классов из пакетов mypack.* будут ли импортированы классы из подпакета? - да

9.	Что такое раннее и позднее связывание? -во время компиляции, во время выполнения программы 

10.	Возможно ли переопределить статический или приватный метод? - нет, потому что это часть класса, а не объекты

11.	Что такое иммутабельный класс?-не изменяемый

12.	Что такое статический блок инициализации?
13.	Можно ли из статического метода получить доступ к нестатическому полю? 

14.	Возможно ли создавать свои собственные аннотации? да, название.java @interface

15.	Когда классы загружаются в память JVM? - по мере того как на них ссылаются

16.	Что означает ключевое слово this? - чтоб не вводить новую переменную которая несет в себе тоже самое значение

17.	Что позволяет делать ключевое слово final?- константы 

18.	Можно ли в интерфейсах объявлять переменные? - да 

19.	Назовите контракт между equals() и hashCode()
20.	Что такое StringPool? Что делает метод intern()?Пул строк (String Pool) — это множество строк в кучи 
(Java Heap Memory). Мы знаем, что String — особый класс в java, с помощью которого мы можем создавать строковые 
объекты.
Метод String.Intern() Вы передадите ему в качестве аргумента строку. Если эта строка уже находится в пуле 
интернирования, метод возвращает ссылку на эту строку.


21.	Где в джава встречается стэк и куча? - jvm делит память и стек заолняет память выполнением методов,
 и освобождает себя
куча, не может себя отчистить, нужен сборщик, и потоко не безопасна 

22.	Где лежат классы в памяти? в куче, в виде ссылок на них, как и все объекты

23.	Какие методы достаются нашим классам от Object?
Object это базовый класс для всех остальных объектов в Java. Любой класс наследуется от Object и, 
соответственно, наследуют его методы (11 методов):
public boolean equals(Object obj) – служит для сравнения объектов по значению;
int hashCode() – возвращает hash код для объекта;
String toString() – возвращает строковое представление объекта;
Class getClass() – возвращает класс объекта во время выполнения;
protected Object clone() – создает и возвращает копию объекта;
void notify() – возобновляет поток, ожидающий монитор;
void notifyAll() – возобновляет все потоки, ожидающие монитор;
void wait() – остановка вызвавшего метод потока до момента пока другой поток не вызовет метод notify() или notifyAll() для этого объекта;
void wait(long timeout) – остановка вызвавшего метод потока на определённое время или пока другой поток не вызовет метод notify() или notifyAll() для этого объекта;
void wait(long timeout, int nanos) – остановка вызвавшего метод потока на определённое время или пока другой поток не вызовет метод notify() или notifyAll() для этого объекта;
protected void finalize() – может вызываться сборщиком мусора в момент удаления объекта при сборке мусора.

24.	Можно ли перегрузить конструктор? - даможете объявлять в одном классе несколько конструкторов, 
которые различаются количеством и типом переменных.

25.	Может ли у перегруженных методов отличаться тип возвращаемого значения? -нет 

26.	Чем отличается абстрактый класс от интерфейса?  Абстрактный класс связывает между собой и объединяет классы,
 имеющие очень близкую связь. В то же время, один и тот же интерфейс могут реализовать классы, у которых вообще нет
 ничего общего.

27.	Чем отличаются вложенные и внутренние классы?
===
Тема 2 (Коллекции):

1. Как устроен ArrayList? - в Java массивы имеют фиксированную длину, и после того как массив создан,
 он не может расти или уменьшаться. ArrayList может менять свой размер во время исполнения программы

2. Можно ли из ArrayList в каком-то случае достать null?
arrayList.add(null)
А потом arrayList.get(0)

3. Вряд ли такое спросят: почему метод ArrayList.add() имеет тип boolean?

4. Как устроен LinkedList? - цепь ссылки на соседей

5. Как LinkedList выполняет поиск по индексу? Или он не умеет это делать?
6. Какова алгоритмическая сложность BigO notaion поиска по индексу в LinkedList?
7. Какова алгоритмическая сложность BigO notaion удаления из LinkedList?
8. Почему коллекции работают только с ссылочными типами данных?
9. Какой List эффективнее если надо удалять элементы из начала, середины, конца списка?
10. Можно ли создать List в котором нельзя менять объекты?
11. Что вы знаете о классе Collections?
12. Зачем может пригодиться Collections.emptyList()?
13. Чем удобна форма List<String> list = new ArrayList<>()?
14. Чем потокобезопасные коллекции отличаются от непотокобезопасных?
15. Что такое Comparable и Comparator?
16. Расскажите как работает HashMap? Почему в HashMap быстрый поиск по ключу?
17. Что такое и как устроен Set?
18. Что такое итератор, зачем нужен? Чем Iterator отличается от ListIterator?

===
Тема 3 (Многопоточность):

1. Что такое потоки-демоны, чем отличаются от обычных? - низкий приоритет

2. До каких пор работает Java-приложение?
3. Может ли поток main завершить свою работу раньше потоков, которые были порождены main'ом?
4. Чем наследование от Thread отличается от реализации интерфейса Runnable для создания потоков? Thread создает 
уникальный объект

5. Что такое приоритет потока?
6. Стоит ли пользоваться методом stop()? -нет
7. Как правильно останавливать потоки?
8. Что такое условие гонки, когда возникает?
9. По чем можно синхронизироваться? Что такое критическая секция?
10. Что такое ключевое слово volatile?
11. Что такое пулы потоков, в чем их плюсы? Когда пул создает потоки? Можно ли пулу указать правила создания потоков?
*. Если завершилась работа потока, в котором был порожден поток-демон, будет ли поток-демон остановлен в этом случае? При условии что еще работают другие обычные потоки
*. Можно ли перезапустить завершившийся поток?
*. Чем отличается Thread.start() от Thread.run()?
*. У потока есть state стоит ли на него ориентироваться?
*. Что такое InterruptedException?
*. Что может выступать в роли монитора?
*. В чем разница между synchronized block и lock?
*. Решает ли volatile проблему race condition?
*. Можно ли ограничить кол-во потоков в CachedThreadPool?
*. В каких ситуациях применяется SingleThreadExecutor
*. Назовите особенности: Semaphore, CyclicBarrier, CountdownLatch, ConcurrentHashMap, Hashtable, Vector, Lock (RL, RRWL), Collections.synchronized(map, set, list), ...
*. В чем разница между Runnable и Callable?
*. Что такое тип ...Future?
===
Тема 4 (JDBC/SQL):

1. Что такое JDBC?
2. Зачем нужен JDBC драйвер?
3. Назовите часто используемые интерфейсы JDBC? Зачем нужен каждый из них?
4. Можно ли подключить несколько JDBC драйверов?
5. Зачем нужен DriverManager?
6. Откуда берется имя драйвера и url для подключения к БД?
7. Чем Statement.executeUpdate() отличается от Statement.executeQuery()?
8. Если мы используем Hibernate или Spring Data JPA задействуется ли хоть как-то JDBC?
9. Как на уровне JDBC управлять открытием и фиксацией транзакций?
10. Зачем выполнять Class.forName()?
11. Что такое транзакция?
12. Назовите свойства транзакций
13. Какие проблемы параллельных транзакций вы можете назвать?
14. Какие уровни изоляции транзакций бывают и что они дают?
15. Если мы используем пакетную отправку запросов, надо ли отключать авто-коммит для повышения скорости выполнения запросов?
===
Тема 5 (Hibernate/Jpa)
===
Тема 6-8 (Java EE/Web/Spring)

1. Какие HTTP-методы вы знаете, для чего они предназначены?
2. Какие статус коды ответов вы знаете, что можете о них сказать?
3. В чем разница между GET и POST запросом?
4. Что такое сервлет?
5. Что такое и зачем нужен application server?
6. В чем разница между application server и контейнером сервлетов?
7. В чем разница между war и jar приложением?
8. Что такое exploded war?
9. Зачем нужны html формы?
10. Что такое cookie? Как работают?
11. Что такое JSESSIONID?
12. Как выглядит HTTP GET запрос?
13. Можно ли отправлять HTTP-запросы через обычный Socket.getOutputStream()? * ДЗ
14. Что такое Spring Bean? Что такое Spring Context?
15. Может ли @Component перехватывать запросы?
16. Чем @Controller отличается от @RestController?
17. Что такое @Scope?
18. Используются ли в Spring Boot сервлеты?
19. Зачем нужен файл application.yaml?
20. Что можете сказать про аннотации: @RequestParam, @RequestMapping, @GetMapping, @PostMapping, @PathVariable, @RequestBody, @ResponseBody, @ModelAttribute
21. Может ли несколько методов контроллеров обрабатывать один и тот же запрос?
22. Зачем нужна аннотация @Bean?
23. Что можно закинуть в качестве аругмента методу контроллера?
24. Откуда Spring Boot знает где искать бины?















